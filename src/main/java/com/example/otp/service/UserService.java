package com.example.otp.service;

import com.example.otp.model.Role;
import com.example.otp.model.User;
import com.example.otp.repository.RoleRepository;
import com.example.otp.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    // –ú–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public String registerUser(String email, String password, String roleName) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        if (userRepository.findByEmail(email).isPresent()) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
        }

        // –ü–æ–∏—Å–∫ —Ä–æ–ª–∏
        Role role = roleRepository.findByName(roleName);
        if (role == null) {
            return "–†–æ–ª—å " + roleName + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = new User();
        user.setUsername(email);   // üëà –∏—Å–ø—Ä–∞–≤–∏–ª –∑–¥–µ—Å—å
        user.setPassword(passwordEncoder.encode(password));
        user.setRoles(Collections.singleton(role));

        userRepository.save(user);


        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!";
    }
}
